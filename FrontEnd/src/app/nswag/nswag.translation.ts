//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ITranslocoClient {
    getTranslations(data: PrimeTableMetaData): Observable<QueryResultOfTranslocoDto>;
    insertOrUpdateWord(translocoDto: TranslocoDto): Observable<TranslocoDto>;
    insertAuto(translocoDtos: TranslocoDto[]): Observable<boolean>;
    currentLanguage(lang: string | undefined): Observable<string>;
    deleteWord(id: number | undefined): Observable<boolean>;
    translate(textUz: string | undefined): Observable<string>;
}

@Injectable({
    providedIn: 'root'
})
export class TranslocoClient implements ITranslocoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getTranslations(data: PrimeTableMetaData): Observable<QueryResultOfTranslocoDto> {
        let url_ = this.baseUrl + "/api/translation/Transloco/GetTranslations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(data);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTranslations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTranslations(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QueryResultOfTranslocoDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QueryResultOfTranslocoDto>;
        }));
    }

    protected processGetTranslations(response: HttpResponseBase): Observable<QueryResultOfTranslocoDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QueryResultOfTranslocoDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    insertOrUpdateWord(translocoDto: TranslocoDto): Observable<TranslocoDto> {
        let url_ = this.baseUrl + "/api/translation/Transloco/InsertOrUpdateWord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(translocoDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertOrUpdateWord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertOrUpdateWord(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TranslocoDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TranslocoDto>;
        }));
    }

    protected processInsertOrUpdateWord(response: HttpResponseBase): Observable<TranslocoDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TranslocoDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    insertAuto(translocoDtos: TranslocoDto[]): Observable<boolean> {
        let url_ = this.baseUrl + "/api/translation/Transloco/InsertAuto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(translocoDtos);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertAuto(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertAuto(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processInsertAuto(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    currentLanguage(lang: string | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/translation/Transloco/CurrentLanguage?";
        if (lang === null)
            throw new Error("The parameter 'lang' cannot be null.");
        else if (lang !== undefined)
            url_ += "lang=" + encodeURIComponent("" + lang) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCurrentLanguage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCurrentLanguage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCurrentLanguage(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteWord(id: number | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/translation/Transloco/DeleteWord?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteWord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteWord(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processDeleteWord(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    translate(textUz: string | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/translation/Transloco/Translate?";
        if (textUz === null)
            throw new Error("The parameter 'textUz' cannot be null.");
        else if (textUz !== undefined)
            url_ += "TextUz=" + encodeURIComponent("" + textUz) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTranslate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTranslate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processTranslate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class QueryResultOfTranslocoDto implements IQueryResultOfTranslocoDto {
    items?: TranslocoDto[];
    totalItems?: number;

    constructor(data?: IQueryResultOfTranslocoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TranslocoDto.fromJS(item));
            }
            this.totalItems = _data["totalItems"];
        }
    }

    static fromJS(data: any): QueryResultOfTranslocoDto {
        data = typeof data === 'object' ? data : {};
        let result = new QueryResultOfTranslocoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalItems"] = this.totalItems;
        return data;
    }
}

export interface IQueryResultOfTranslocoDto {
    items?: TranslocoDto[];
    totalItems?: number;
}

export class TranslocoDto implements ITranslocoDto {
    id?: number | undefined;
    code?: string | undefined;
    valueUZ?: string | undefined;
    valueRU?: string | undefined;
    valueEN?: string | undefined;
    valueKR?: string | undefined;

    constructor(data?: ITranslocoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.valueUZ = _data["valueUZ"];
            this.valueRU = _data["valueRU"];
            this.valueEN = _data["valueEN"];
            this.valueKR = _data["valueKR"];
        }
    }

    static fromJS(data: any): TranslocoDto {
        data = typeof data === 'object' ? data : {};
        let result = new TranslocoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["valueUZ"] = this.valueUZ;
        data["valueRU"] = this.valueRU;
        data["valueEN"] = this.valueEN;
        data["valueKR"] = this.valueKR;
        return data;
    }
}

export interface ITranslocoDto {
    id?: number | undefined;
    code?: string | undefined;
    valueUZ?: string | undefined;
    valueRU?: string | undefined;
    valueEN?: string | undefined;
    valueKR?: string | undefined;
}

export class PrimeTableMetaData implements IPrimeTableMetaData {
    first?: number;
    rows?: number;
    filters?: { [key: string]: FilterMetadata; };
    sortField?: string | undefined;
    sortOrder?: number;
    globalFilter?: string | undefined;

    constructor(data?: IPrimeTableMetaData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.rows = 10;
            this.sortField = "id";
            this.sortOrder = 1;
            this.globalFilter = "";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.first = _data["first"];
            this.rows = _data["rows"] !== undefined ? _data["rows"] : 10;
            if (_data["filters"]) {
                this.filters = {} as any;
                for (let key in _data["filters"]) {
                    if (_data["filters"].hasOwnProperty(key))
                        (<any>this.filters)![key] = _data["filters"][key] ? FilterMetadata.fromJS(_data["filters"][key]) : new FilterMetadata();
                }
            }
            this.sortField = _data["sortField"] !== undefined ? _data["sortField"] : "id";
            this.sortOrder = _data["sortOrder"] !== undefined ? _data["sortOrder"] : 1;
            this.globalFilter = _data["globalFilter"] !== undefined ? _data["globalFilter"] : "";
        }
    }

    static fromJS(data: any): PrimeTableMetaData {
        data = typeof data === 'object' ? data : {};
        let result = new PrimeTableMetaData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["first"] = this.first;
        data["rows"] = this.rows;
        if (this.filters) {
            data["filters"] = {};
            for (let key in this.filters) {
                if (this.filters.hasOwnProperty(key))
                    (<any>data["filters"])[key] = this.filters[key] ? this.filters[key].toJSON() : <any>undefined;
            }
        }
        data["sortField"] = this.sortField;
        data["sortOrder"] = this.sortOrder;
        data["globalFilter"] = this.globalFilter;
        return data;
    }
}

export interface IPrimeTableMetaData {
    first?: number;
    rows?: number;
    filters?: { [key: string]: FilterMetadata; };
    sortField?: string | undefined;
    sortOrder?: number;
    globalFilter?: string | undefined;
}

export class FilterMetadata implements IFilterMetadata {
    value?: any | undefined;
    matchMode?: string | undefined;

    constructor(data?: IFilterMetadata) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.matchMode = "equals";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.matchMode = _data["matchMode"] !== undefined ? _data["matchMode"] : "equals";
        }
    }

    static fromJS(data: any): FilterMetadata {
        data = typeof data === 'object' ? data : {};
        let result = new FilterMetadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["matchMode"] = this.matchMode;
        return data;
    }
}

export interface IFilterMetadata {
    value?: any | undefined;
    matchMode?: string | undefined;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}